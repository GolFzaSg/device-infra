/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.infra.client.longrunningservice;

import "src/devtools/mobileharness/infra/client/longrunningservice/proto/log.proto";
import "src/devtools/mobileharness/infra/client/longrunningservice/proto/session.proto";

option java_package = "com.google.devtools.mobileharness.infra.client.longrunningservice.proto";
option java_outer_classname = "ControlServiceProto";

service ControlService {
  // Kills the server if no running/pending session in the server.
  rpc KillServer(KillServerRequest) returns (KillServerResponse);

  // Gets logs of the server.
  rpc GetLog(stream GetLogRequest) returns (stream GetLogResponse);

  // Sets the log level of GetLog.
  rpc SetLogLevel(SetLogLevelRequest) returns (SetLogLevelResponse);
}

message KillServerRequest {
  // Optional.
  //
  // If present, before checking if the server will be killed, abort all
  // sessions generated by the given client first.
  AbortAllSessionsFromClient abort_all_sessions_from_client = 1;

  message AbortAllSessionsFromClient {
    string client_id = 1;
  }
}

message KillServerResponse {
  // Required.
  oneof result {
    Success success = 1;
    Failure failure = 2;
  }

  // Succeed if no running/pending session (or all running/pending sessions have
  // been aborted) and the server will exit.
  message Success {}

  // Fail otherwise the request will be discarded.
  message Failure {
    // Required.
    //
    // Summary of unfinished sessions. Only parts of fields are present.
    repeated SessionDetail unfinished_sessions = 1;
  }

  // Required.
  //
  // PID of the server.
  int64 server_pid = 3;
}

message GetLogRequest {
  // Required.
  bool enable = 1;

  // If present, only logs associated to the client will be returned.
  //
  // Ignored if enable is false.
  optional string client_id = 2;
}

message GetLogResponse {
  // Required.
  LogRecords log_records = 1;
}

message SetLogLevelRequest {
  // Required.
  //
  // Case will be ignored.
  string level = 1;
}

message SetLogLevelResponse {}
