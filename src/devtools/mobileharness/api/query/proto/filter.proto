/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.api.query;

option java_package = "com.google.devtools.mobileharness.api.query.proto";
option java_outer_classname = "FilterProto";

// Lab filter for filtering labs and their devices from result.
//
// A lab and its devices will appear in the result if the lab matches ALL
// lab_match_condition.
message LabFilter {
  // Condition to match a lab.
  message LabMatchCondition {
    // Condition to match host name of a lab.
    message LabHostNameMatchCondition {
      StringMatchCondition condition = 1;
    }

    // An unset or unrecognized condition will always match.
    oneof condition {
      LabHostNameMatchCondition lab_host_name_match_condition = 1;
    }
  }

  repeated LabMatchCondition lab_match_condition = 1;
}

// Device filter for filter devices from result.
//
// A device will appear in the result if the device matches ALL
// device_match_condition AND its lab matches ALL lab_match_condition.
message DeviceFilter {
  // Condition to match a device.
  message DeviceMatchCondition {
    // Condition to match UUID of a device.
    message DeviceUuidMatchCondition {
      StringMatchCondition condition = 1;
    }

    // An unset or unrecognized condition will always match.
    oneof condition {
      DeviceUuidMatchCondition device_uuid_match_condition = 1;
    }
  }

  repeated DeviceMatchCondition device_match_condition = 2;
}

// Condition to match a string attribute.
message StringMatchCondition {
  // A string matches this condition if it is in the list of expected
  // values (case-insensitive).
  message Include {
    repeated string expected = 1;
  }

  // A string matches this condition if it matches the given regex.
  //
  // An invalid regex will match nothing.
  message MatchesRegex {
    string regex = 1;
  }

  // An unset or unrecognized condition will always match.
  oneof condition {
    Include include = 1;
    MatchesRegex matches_regex = 2;
  }
}
